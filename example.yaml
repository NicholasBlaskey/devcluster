# startup_input is how you configure the UI.  It's literally just a set of keys
# that will be passed into the UI as if you typed them.  These keys will turn
# off the db and hasura logs:
# startup_input: "!@"

# log_dir is where persistent logs are written to.
# log_dir: /tmp/devcluster-logs

# stages is the key configuration of the whole cluster.  Each stage must be
# completed before moving to the next stage, so order matters.  This example
# assumes that devcluster.py is responsible for the database and hasura, but
# if you wanted to run them externally then you could just remove them here.
stages:

  # db is predefined type of stage specific to how determined runs the
  # database.
  - db:
      # port: 5432
      # db_name: determined
      # password: postgres
      # container_name: determined_db

      # data_dir is where the persistent files will be saved to.
      data_dir: ~/.postgres

  # There is no predefined stage for hasura since hasura is going away, so this
  # is what a fully-custom stage looks like.
  - custom_docker:
      name: hausra
      container_name: determined_hasura
      run_args:
        - -p
        - 8081:8080
        - -e
        - HASURA_GRAPHQL_ADMIN_SECRET=hasura
        - -e
        # NOTE: you need to put in a host address for postgres which is
        # resolvable from inside docker.  I have been using my laptop's
        # external IP address, 192.168.0.4, but mac users here could use
        # host.docker.internal here
        - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:postgres@MY_IP_ADDR:5432/determined
        - -e
        - HASURA_GRAPHQL_ENABLE_CONSOLE=true
        - -e
        - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
        - -e
        - HASURA_GRAPHQL_CONSOLE_ASSETS_DIR=/srv/console-assets
        - -e
        - HASURA_GRAPHQL_LOG_LEVEL=warn
        - hasura/graphql-engine:v1.1.0
      # post is a list of
      post:
        # conncheck is a type of post command that will return after a server
        # becomes available on a certain port
        - conncheck:
            port: 8081

  # master is a predefined type of stage for to how determined runs the master.
  - master:
      # pre is a set of precommands to be run before starting the master.
      # In this case those commands are just a pair of make targets, specified
      # as shell commands.
      pre:
        - sh: make -C master build
        - sh: make -C tools prep-root
      # config_file is the most important config detail for the master stage.
      # It is literally just master.yaml.
      config_file:
        db:
          host: localhost
          port: 5432
          password: postgres
          user: postgres
          name: determined
        hasura:
          address: localhost:8081
          secret: hasura
        checkpoint_storage:
          type: shared_fs
          host_path: /tmp
          storage_path: determined-cp
        log:
          level: debug
        # This is important: we have to use the symbolic links in the
        # tools/build directory to run properly.
        root: tools/build

  - agent:
      pre:
        - sh: make -C agent build
      config_file:
        # NOTE: you need to put in an address for the master which is
        # resolvable from BOTH inside and outside docker.  I have been using my
        # laptop's external IP address, 192.168.0.4, but you may be able to
        # put you computer's hostname here.  host.docker.internal will not work.
        master_host: MY_IP_ADDR
        master_port: 8080
